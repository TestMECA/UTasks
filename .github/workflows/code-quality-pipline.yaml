name: Code Quality

on:
  pull_request:
    branches:
      - main
      - stage
      - develop

concurrency:
  group: self-hosted-${{ github.head_ref || github.ref }}-${{ github.base_ref }}
  cancel-in-progress: true

jobs:
  app-linting:
    name:  üîâ Linting the code
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

      - name: Check out the repository code
        uses: actions/checkout@v2

      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '14'
          cache: 'yarn'
          cache-dependency-path: yarn.lock

      - name: Installing yarn packages
        run: yarn

      - run: echo "üñ•Ô∏è The workflow is now ready to start linting the ${{ github.repository }} code."

      - name: Run the eslint
        run: yarn ci:code:lint

  unit-testing:
    name: üîâ Run Unit Tests
    needs: app-linting
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

      - name: Check out the repository code
        uses: actions/checkout@v2
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '14'
          cache: 'yarn'
          cache-dependency-path: yarn.lock

      - name: Installing yarn packages
        run: yarn

      - run: echo "üñ•Ô∏è The workflow is now ready to start unit testing the ${{ github.repository }} code."

      - name: Run the jest tests
        run: yarn ci:unit:test

      - name: Upload unit test coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./cypress/reports/jest-coverage/coverage-final.json
          flags: unittest-${{ github.base_ref }}
          env_vars: OS,Node
          name: codecov-unittest-${{ github.base_ref }}
          fail_ci_if_error: true
          verbose: true

  ui-tests:
    name: üîä UI testing - ${{ matrix.browser }} browser
    needs: [app-linting, unit-testing]
    strategy:
      fail-fast: false
      matrix:
        browser: [Chrome , firefox]
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

      - name: Check out the repository code
        uses: actions/checkout@v2
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '14'
          cache: 'yarn'
          cache-dependency-path: yarn.lock

      - name: Installing yarn packages
        run: yarn

      - name: Decrypt the envs and cypress env files
        run: ./.github/scripts/decrypt_secrets.sh
        env:
          DECRYPT_SECRETS_PASSPHRASE: ${{ secrets.DECRYPT_SECRETS_PASSPHRASE }}

      - name: Remove the reports
        run: yarn ci:remove:reports

      - name: Set the project environment to DEVELOP
        if: ${{ contains( github.base_ref , 'develop' ) }}
        run: yarn firebase use DEVELOP --token ${{ secrets.FIREBASE_TOKEN }}

      - name: Set the project environment to STAGE
        if: ${{ contains( github.base_ref , 'stage' ) }}
        run: yarn firebase use STAGE --token ${{ secrets.FIREBASE_TOKEN }}

      - name: Set the project environment to MAIN
        if: ${{ contains( github.base_ref , 'main' ) }}
        run: yarn firebase use MAIN --token ${{ secrets.FIREBASE_TOKEN }}

      - name: Auto generating the firebase configuration
        run: yarn firebase apps:sdkconfig web --token ${{ secrets.FIREBASE_TOKEN }} --json | tail -n +3 |head -n -1 > ./src/utasks-configuration.json

      - run: echo "üñ•Ô∏è The workflow is now ready to start cypress tests the ${{ github.repository }} code in the ${{matrix.browser}} browser."

      - name: üôà UI Tests - On ${{ matrix.browser }}
        id: uiTest
        uses: cypress-io/github-action@v2
        with:
          install: false
          start: yarn ci:app:start
          wait-on: 'http://localhost:5050'
          wait-on-timeout: 300
          browser: ${{ matrix.browser }}
          headless: true
          command: yarn ci:cy:run -- --env TESTING_ENV=LOCAL
          parallel: false
          record: true
          tag: node-${{ matrix.node }}-${{ matrix.browser }}
        env:
          # pass the Dashboard record key as an environment variable
          CYPRESS_RECORD_KEY: ${{ secrets.UTASKS_CYPRESS_RECORD_KEY }}
          # pass GitHub token to allow accurately detecting a build vs a re-run build
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # pass the project ID from the secrets through environment variable
          CYPRESS_PROJECT_ID: ${{ secrets.UTASKS_CYPRESS_PROJECT_ID }}

      - name: üëÄ Generate the testing report
        if: always()
        run: yarn ci:code:test:report

      - name: Publish the reports on GitHub - on success
        uses: actions/upload-artifact@v2
        if: ${{ contains( steps.uiTest.outcome , 'success' ) }}
        with:
          name: ${{ matrix.browser }}-cypress-reports-success-${{ github.sha }}
          path: |
            cypress/reports/mochawsome/**.html

      - name: Publish the reports on GitHub - on failure
        uses: actions/upload-artifact@v2
        if: ${{ failure() && contains( steps.uiTest.outcome , 'failure' ) }}
        with:
          name: ${{ matrix.browser }}-cypress-reports-failure-${{ github.sha }}
          path: |
            cypress/reports/mochawsome/**.html
            cypress/reports/screenshots/**
            cypress/reports/videos/**
            !cypress/reports/.nyc_output
            !cypress/reports/coverage
            !cypress/reports/downloads

      - name: Upload UI coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          files: ./cypress/reports/cy-coverage/coverage-final.json
          flags: ui-tests-${{ matrix.browser }}-${{ github.base_ref }} # optional
          env_vars: OS,Node

          name: codecov-ui-${{ matrix.browser }}-${{ github.base_ref }} # optional
          fail_ci_if_error: true # optional (default = false)
          verbose: true # optional (default = false)